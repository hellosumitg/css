/* section {
    background: #ff0000;
}  */

/* 
    Order of specificity of different Rules in CSS:-
    `Inline Styles` > `#ID selectors` > `.class, :pseudo-class and [attribute] selectors` > `<Tag> and ::pseudo-element selectors`
*/

/* 
    inheritance has the lowest specificity of all hence below Rule will not be applied which can be seen in `Elements' Styles section` section of Developer Tools 
*/

/* 
    We would use Universal Selector `*{}` as if we used this `box-sizing` in `body` it will be inherited in different elements but again `content-box` situation will be handled
    and not the `border-box`(i.e including `content`, `padding` and `border`). So as to implement this condition evenly on all elements and not using inheritance.
*/
* {
    /* below anywhere we use the width and height is by default applicable on `content-box` which doesn't include padding and border (i.e `border-box`) but we can set it by using this*/
    box-sizing: border-box;
}

body {
    font-family: 'Montserrat', sans-serif;
    margin: 0;
    /* Margin Collapsing:- by default browser intend to overlap margins of two adjacent box elements*/
}

#product-overview {
    background: #ff0000;
    width: 100%;
    height: 528px;
    padding: 10px;
    /* 
        border-style: solid;
        border-color: black;
        border-width: 5px;
    */
    /* border: 5px solid black; */
    /* margin is not required in `box-sizing` */
    /* margin: 10px; */
    
}

.section-title {
    color: #2ddf5c;
    /* below property will help us to use the inherited font that was declared for `body` */
    /* font-family: inherit;  */
}

/* 
    below using `combinators` means combining 2 or more properties, 
    it also `increases the specificity` over other `Rules` as it has more information than others 
    and this below combinator also known as `Descendant` combinators(in this Second element is a descendant of the first element on which all the conditions are applicable)
    there are total 4 types of combinators, one discussed above other 3 will be discussed in assignment
*/
#product-overview h1 {
    color: white;
    /* Added from Google fonts */
    font-family: 'Anton', sans-serif;
}

/* h1 {
    font-family: sans-serif;
} */

.main-header {
    background: #2ddf5c;
    /* 
        padding: top  right  bottom  left;
        padding: top&bottom  right&left;
        padding: top&right&bottom&left;
    */
    padding: 8px 16px;
    width: 100%;
}

/* `Direct Child or Child combinator` */
.main-header > div {
    display: inline-block;
    vertical-align: middle;
}

.main-header__brand {
    color: #0e4f1f;
    /* removing default `text-decoration: underline;` which was done by the browser */
    text-decoration: none;
    /* now using `Montserrat` bolder version */
    font-weight: bold;
    font-size: 22px;
}

.main-nav {
    display: inline-block;
    text-align: right;
    /* below subtracting width of `uHost` <div>(i.e 54px) from 100% width */
    width: calc(100% - 74px);
    vertical-align: middle;
}

.main-nav__items {
    margin: 0;
    padding: 0;
    /* below is used for removing any type of bullet points from the list */
    list-style: none;
    
}
.main-nav__item {
    /* 
        below will help us have both inline and block level properties
        i.e we can style the elements like block level but they sit to each other like an inline element
    */
    display: inline-block;
    margin: 0 16px;
}

/* On Performance stand point if we are creating a website like `faceBook` then assigning `class=""` to the <a> would be good */
.main-nav__item a {
    text-decoration: none;
    color: #0e4f1f;
}

/* 
    `::after`, `::before` Pseudo Elements actually allow us to render content through CSS and this should only be helpful content which adds to the design,
    not crucial page content(as theses are handled by HTML) just for accessibility reason.
*/
/* .main-nav__item a::after {
    content: " (Link)";
    color: red;
} */

/* 
    Pseudo Classes- `pseudo :class name` (defines style of `special state` of an element eg. `:hover`, `:active`, `:focus` etc)
    Pseudo Elements : `pseudo ::element name` (defines style of a `specific part` of an element eg. `::after`, `::before`, `::first-letter`, `::first-line` etc)
*/

/* Adding Pseudo Classes */
/* .main-nav__item a:hover {
    color: white;
}

.main-nav__item a:active {
    color: white;
} */

/* Also applying `Grouping Rules` */
.main-nav__item a:hover,
.main-nav__item a:active {
    color: white;
}

/* Adding Pseudo Element */
/* p::first-letter {
    color: red;
    font-size: 20px;
} */

